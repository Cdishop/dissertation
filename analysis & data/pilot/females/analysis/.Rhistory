'repo' = repos,
'uniqid' = c(1:length(repos))
)
df <- left_join(df, repids)
df %>%
filter(event_at_index == 0) %>%
select(uniqid, event_at) %>%
rename("Repo ID" = uniqid,
"Start Date" = event_at)
numdays <- df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index))
df <- left_join(df, numdays)
df %>%
filter(event_at_index == 0) %>%
select(repoid, event_at, numdays) %>%
rename("Repo ID" = repoid,
"Start Date" = event_at,
"Length of Time Series (Days)" = numdays)
df1 <- df %>%
filter(repoid == 1)
dfdickey <- plm.data(df1, index = c("repoid", "event_at_index"))
# not significant = random walk
adf.test(dfdickey[, "value"])["p.value"][[1]] # p value
adf.test(dfdickey[, "value"])$statistic[[1]] # test statistic
# significant = random walk
kpss.test(dfdickey[, "value"], null = "Trend")["p.value"][[1]]
runs <- nrow(repids)
store_results <- data.frame(
"dickeyp" = numeric(runs),
"kpss" = numeric(runs),
"repoid" = numeric(runs),
"dickey" = numeric(runs)
)
for(i in 1:runs){
dt <- df %>%
filter(uniqid == i)
dtdickey <- plm.data(dt, index = c("repoid", "event_at_index"))
# not significant = random walk
dy <- adf.test(dtdickey[, "value"])["p.value"][[1]]
dt <- adf.test(dtdickey[, "value"])$statistic[[1]]
# significant = random walk
kp <- kpss.test(dtdickey[, "value"], null = "Trend")["p.value"][[1]]
store_results[[i, "dickeyp"]] <- dy
store_results[[i, "kpss"]] <- kp
store_results[[i, "repoid"]] <- i
store_results[[i, "dickey"]] <- dt
}
store_results %>%
filter(dickeyp > 0.05) %>%
count() / nrow(store_results)
store_results %>%
filter(kpss < 0.05) %>%
count() / nrow(store_results)
(store_results %>%
filter(dickeyp > 0.05, kpss < 0.05) %>%
count()) / nrow(store_results)
df$nicedate <- gsub(df$event_at, pattern = "00:00:00", replacement = "")
library(kableExtra)
store_results <- store_results %>%
mutate(DF = ifelse(dickeyp > 0.05, "Yes", "No")) %>%
mutate(KP = ifelse(kpss < 0.05, "Yes", "No"))
df <- left_join(df, store_results)
df %>%
filter(event_at_index == 0) %>%
select(uniqid, nicedate, numdays, dickey, dickeyp, DF) %>%
mutate(numdays_round = round(numdays, digits = 0)) %>%
mutate(dickey = round(dickey, digits = 2)) %>%
mutate(dickeyp = round(dickeyp, digits = 2)) %>%
select(uniqid, nicedate, numdays_round, dickey, dickeyp, DF) %>%
mutate(nicedate = as.character(nicedate)) %>%
mutate(nicedate = str_trim(nicedate)) %>%
mutate(numdays_round = as.character(numdays_round)) %>%
mutate(numdays_round = str_trim(numdays_round)) %>%
mutate(dickey = as.character(dickey)) %>%
mutate(dickey = str_trim(dickey)) %>%
mutate(dickeyp = as.character(dickeyp)) %>%
mutate(dickeyp = str_trim(dickeyp)) %>%
mutate(uniqid = as.character(uniqid)) %>%
mutate(uniqid = str_trim(uniqid)) %>%
rename("Repo ID" = uniqid,
"Start" = nicedate,
"Length (Days)" = numdays_round,
"Dickey-Fuller" = dickey,
"P-Value" = dickeyp,
"Unit Root" = DF) %>%
kable(tabe.attr = "style='width:60%;'") %>%
kable_styling() #%>%
#footnote("80% of series contain unit root")
library(flextable)
df$nicedate <- gsub(df$event_at, pattern = "00:00:00", replacement = "")
library(kableExtra)
store_results <- store_results %>%
mutate(DF = ifelse(dickeyp > 0.05, "Yes", "No")) %>%
mutate(KP = ifelse(kpss < 0.05, "Yes", "No"))
df <- left_join(df, store_results)
fitdf <- df %>%
filter(event_at_index == 0) %>%
select(uniqid, nicedate, numdays, dickey, dickeyp, DF) %>%
mutate(numdays_round = round(numdays, digits = 0)) %>%
mutate(dickey = round(dickey, digits = 2)) %>%
mutate(dickeyp = round(dickeyp, digits = 2)) %>%
select(uniqid, nicedate, numdays_round, dickey, dickeyp, DF) %>%
rename("Repo ID" = uniqid,
"Start Date" = nicedate,
"Length (Days)" = numdays_round,
"Dickey-Fuller" = dickey,
"P-Value" = dickeyp,
"Unit Root" = DF)
fitdf <- flextable(fitdf)
fitdf <- autofit(fitdf)
fitdf <- fontsize(fitdf, size = 9)
fitdf
library(tidyverse)
df <- read.csv("../clean/3-output/daily_issues.csv")
allrepos <- df %>% distinct(repoid) %>% pull(repoid)
allrepos1 <- data.frame(repo1 = c(allrepos))
allrepos2 <- data.frame(repo2 = c(allrepos))
crossrepos <- subset(merge(allrepos1, allrepos2, by = NULL), repo1 <= repo2)
crossrepos <- crossrepos %>%
filter(repo1 != repo2)
savepair <- numeric(nrow(crossrepos))
for(j in 1:nrow(crossrepos)){
pair <- crossrepos %>%
slice(j)
pairdf <- df %>%
filter(repoid %in% c(pair$repo1, pair$repo2))
pairdf %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index)) %>%
arrange(numdays) %>%
slice(1) %>% pull(numdays) %>% floor() -> series_n
percent <- pairdf %>%
filter(event_at_index %in% c(1:series_n)) %>%
select(X, event_at_index, value, repoid, repo) %>%
group_by(event_at_index) %>%
mutate(rk = rank(-value)) %>%
filter(repoid == pair$repo1) %>%
filter(rk == 1) %>%
nrow() / series_n
savepair[j] <- percent
}
plotpair <- round(savepair, 1)
ggplot() + geom_histogram(aes(plotpair)) +
theme_bw() +
labs(x = "Fraction Of Periods With Max Requests", y = "Count")
hm <- data.frame(
'freqs' = c(plotpair)
)
hm <- hm %>%
count(freqs) %>%
mutate(perc = n / 325)
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead") +
#theme(axis.text.x = element_blank()) +
theme(axis.title.y = element_text(angle = 0)) +
ggtitle("Facebook")
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Time", y = "Probability of Spending n Periods in the Lead") +
theme(axis.text.x = element_blank())
ggplot(df, aes(x = freqs, y = perc)) +
#geom_bar(stat = "identity", position = "dodge", alpha = 0.3) +
geom_density(stat = "identity", alpha = 0.5, color = NA) +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead",
fill = "")
ggplot(hm, aes(x = freqs, y = perc)) +
#geom_bar(stat = "identity", position = "dodge", alpha = 0.3) +
geom_density(stat = "identity", alpha = 0.5, color = NA) +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead",
fill = "")
ggplot(hm, aes(x = freqs, y = perc)) +
#geom_bar(stat = "identity", position = "dodge", alpha = 0.3) +
geom_density(stat = "identity", alpha = 0.5) +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead",
fill = "")
knitr::opts_chunk$set(echo = F, warning = F, message = F, include = F)
library(tidyverse)
library(tseries)
library(plm)
df <- read.csv("../clean/3-output/daily_issues.csv")
df %>%
distinct(repo) %>% nrow()
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index))
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index)) %>%
filter(numdays < 500) %>%
pull(repo) -> dontuse
df <- df %>%
filter(! repo %in% c(dontuse))
repos <- df %>%
distinct(repo) %>% pull()
repids <- tibble(
'repo' = repos,
'uniqid' = c(1:length(repos))
)
df <- left_join(df, repids)
df %>%
filter(event_at_index == 0) %>%
select(uniqid, event_at) %>%
rename("Repo ID" = uniqid,
"Start Date" = event_at)
numdays <- df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index))
df <- left_join(df, numdays)
df %>%
filter(event_at_index == 0) %>%
select(repoid, event_at, numdays) %>%
rename("Repo ID" = repoid,
"Start Date" = event_at,
"Length of Time Series (Days)" = numdays)
df1 <- df %>%
filter(repoid == 1)
dfdickey <- plm.data(df1, index = c("repoid", "event_at_index"))
# not significant = random walk
adf.test(dfdickey[, "value"])["p.value"][[1]] # p value
adf.test(dfdickey[, "value"])$statistic[[1]] # test statistic
# significant = random walk
kpss.test(dfdickey[, "value"], null = "Trend")["p.value"][[1]]
runs <- nrow(repids)
store_results <- data.frame(
"dickeyp" = numeric(runs),
"kpss" = numeric(runs),
"repoid" = numeric(runs),
"dickey" = numeric(runs)
)
for(i in 1:runs){
dt <- df %>%
filter(uniqid == i)
dtdickey <- plm.data(dt, index = c("repoid", "event_at_index"))
# not significant = random walk
dy <- adf.test(dtdickey[, "value"])["p.value"][[1]]
dt <- adf.test(dtdickey[, "value"])$statistic[[1]]
# significant = random walk
kp <- kpss.test(dtdickey[, "value"], null = "Trend")["p.value"][[1]]
store_results[[i, "dickeyp"]] <- dy
store_results[[i, "kpss"]] <- kp
store_results[[i, "repoid"]] <- i
store_results[[i, "dickey"]] <- dt
}
store_results %>%
filter(dickeyp > 0.05) %>%
count() / nrow(store_results)
store_results %>%
filter(kpss < 0.05) %>%
count() / nrow(store_results)
(store_results %>%
filter(dickeyp > 0.05, kpss < 0.05) %>%
count()) / nrow(store_results)
df$nicedate <- gsub(df$event_at, pattern = "00:00:00", replacement = "")
library(kableExtra)
store_results <- store_results %>%
mutate(DF = ifelse(dickeyp > 0.05, "Yes", "No")) %>%
mutate(KP = ifelse(kpss < 0.05, "Yes", "No"))
df <- left_join(df, store_results)
df %>%
filter(event_at_index == 0) %>%
select(uniqid, nicedate, numdays, dickey, dickeyp, DF) %>%
mutate(numdays_round = round(numdays, digits = 0)) %>%
mutate(dickey = round(dickey, digits = 2)) %>%
mutate(dickeyp = round(dickeyp, digits = 2)) %>%
select(uniqid, nicedate, numdays_round, dickey, dickeyp, DF) %>%
mutate(nicedate = as.character(nicedate)) %>%
mutate(nicedate = str_trim(nicedate)) %>%
mutate(numdays_round = as.character(numdays_round)) %>%
mutate(numdays_round = str_trim(numdays_round)) %>%
mutate(dickey = as.character(dickey)) %>%
mutate(dickey = str_trim(dickey)) %>%
mutate(dickeyp = as.character(dickeyp)) %>%
mutate(dickeyp = str_trim(dickeyp)) %>%
mutate(uniqid = as.character(uniqid)) %>%
mutate(uniqid = str_trim(uniqid)) %>%
rename("Repo ID" = uniqid,
"Start" = nicedate,
"Length (Days)" = numdays_round,
"Dickey-Fuller" = dickey,
"P-Value" = dickeyp,
"Unit Root" = DF) %>%
kable(tabe.attr = "style='width:60%;'") %>%
kable_styling() #%>%
#footnote("80% of series contain unit root")
library(flextable)
df$nicedate <- gsub(df$event_at, pattern = "00:00:00", replacement = "")
library(kableExtra)
store_results <- store_results %>%
mutate(DF = ifelse(dickeyp > 0.05, "Yes", "No")) %>%
mutate(KP = ifelse(kpss < 0.05, "Yes", "No"))
df <- left_join(df, store_results)
fitdf <- df %>%
filter(event_at_index == 0) %>%
select(uniqid, nicedate, numdays, dickey, dickeyp, DF) %>%
mutate(numdays_round = round(numdays, digits = 0)) %>%
mutate(dickey = round(dickey, digits = 2)) %>%
mutate(dickeyp = round(dickeyp, digits = 2)) %>%
select(uniqid, nicedate, numdays_round, dickey, dickeyp, DF) %>%
rename("Repo ID" = uniqid,
"Start Date" = nicedate,
"Length (Days)" = numdays_round,
"Dickey-Fuller" = dickey,
"P-Value" = dickeyp,
"Unit Root" = DF)
fitdf <- flextable(fitdf)
fitdf <- autofit(fitdf)
fitdf <- fontsize(fitdf, size = 9)
fitdf
library(tidyverse)
df <- read.csv("../clean/3-output/daily_issues.csv")
allrepos <- df %>% distinct(repoid) %>% pull(repoid)
allrepos1 <- data.frame(repo1 = c(allrepos))
allrepos2 <- data.frame(repo2 = c(allrepos))
crossrepos <- subset(merge(allrepos1, allrepos2, by = NULL), repo1 <= repo2)
crossrepos <- crossrepos %>%
filter(repo1 != repo2)
savepair <- numeric(nrow(crossrepos))
for(j in 1:nrow(crossrepos)){
pair <- crossrepos %>%
slice(j)
pairdf <- df %>%
filter(repoid %in% c(pair$repo1, pair$repo2))
pairdf %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index)) %>%
arrange(numdays) %>%
slice(1) %>% pull(numdays) %>% floor() -> series_n
percent <- pairdf %>%
filter(event_at_index %in% c(1:series_n)) %>%
select(X, event_at_index, value, repoid, repo) %>%
group_by(event_at_index) %>%
mutate(rk = rank(-value)) %>%
filter(repoid == pair$repo1) %>%
filter(rk == 1) %>%
nrow() / series_n
savepair[j] <- percent
}
plotpair <- round(savepair, 1)
ggplot() + geom_histogram(aes(plotpair)) +
theme_bw() +
labs(x = "Fraction Of Periods With Max Requests", y = "Count")
hm <- data.frame(
'freqs' = c(plotpair)
)
hm <- hm %>%
count(freqs) %>%
mutate(perc = n / 325)
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead") +
#theme(axis.text.x = element_blank()) +
theme(axis.title.y = element_text(angle = 0)) +
ggtitle("Facebook")
plotpair <- round(savepair, 1)
ggplot() + geom_histogram(aes(plotpair)) +
theme_bw() +
labs(x = "Fraction Of Periods With Max Requests", y = "Count")
View(hm)
savepair
library(tidyverse)
library(tseries)
library(plm)
df <- read.csv("../clean/3-output/daily_issues.csv")
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index))
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index)) %>%
filter(numdays < 500) %>%
pull(repo) -> dontuse
df <- df %>%
filter(! repo %in% c(dontuse))
repos <- df %>%
distinct(repo) %>% pull()
repids <- tibble(
'repo' = repos,
'uniqid' = c(1:length(repos))
)
df <- left_join(df, repids)
df %>%
filter(event_at_index == 0) %>%
select(uniqid, event_at) %>%
rename("Repo ID" = uniqid,
"Start Date" = event_at)
allrepos <- df %>% distinct(repoid) %>% pull(repoid)
allrepos1 <- data.frame(repo1 = c(allrepos))
allrepos2 <- data.frame(repo2 = c(allrepos))
crossrepos <- subset(merge(allrepos1, allrepos2, by = NULL), repo1 <= repo2)
crossrepos <- crossrepos %>%
filter(repo1 != repo2)
savepair <- numeric(nrow(crossrepos))
for(j in 1:nrow(crossrepos)){
pair <- crossrepos %>%
slice(j)
pairdf <- df %>%
filter(repoid %in% c(pair$repo1, pair$repo2))
pairdf %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index)) %>%
arrange(numdays) %>%
slice(1) %>% pull(numdays) %>% floor() -> series_n
percent <- pairdf %>%
filter(event_at_index %in% c(1:series_n)) %>%
select(X, event_at_index, value, repoid, repo) %>%
group_by(event_at_index) %>%
mutate(rk = rank(-value)) %>%
filter(repoid == pair$repo1) %>%
filter(rk == 1) %>%
nrow() / series_n
savepair[j] <- percent
}
plotpair <- round(savepair, 1)
ggplot() + geom_histogram(aes(plotpair)) +
theme_bw() +
labs(x = "Fraction Of Periods With Max Requests", y = "Count")
hm <- data.frame(
'freqs' = c(plotpair)
)
View(hm)
hm <- hm %>%
count(freqs) %>%
mutate(perc = n / nrow(hm))
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead") +
#theme(axis.text.x = element_blank()) +
theme(axis.title.y = element_text(angle = 0)) +
ggtitle("Facebook")
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Time", y = "Probability of Spending n Periods in the Lead") +
theme(axis.text.x = element_blank())
ggplot(hm, aes(x = freqs, y = perc)) +
#geom_bar(stat = "identity", position = "dodge", alpha = 0.3) +
geom_density(stat = "identity", alpha = 0.5) +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead",
fill = "")
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Time", y = "Probability of Spending n Periods in the Lead") +
theme(axis.text.x = element_blank(),
axit.ticks.x = element_blank())
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Time", y = "Probability of Spending n Periods in the Lead") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Proportion of Periods", y = "Probability of Spending n Periods in the Lead") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead")
gplot <- ggplot(hm, aes(x = freqs, y = perc)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Proportion of n Periods", y = "Probability of Spending n Periods in the Lead") +
theme(text = element_text(size = 14))
ggsave('use.pdf', gplot, width = 10, height = 8)
knitr::opts_chunk$set(echo = F, warning = F, message = F, include = F)
library(tidyverse)
library(tseries)
library(plm)
df <- read.csv("../clean/3-output/daily_issues.csv")
df %>%
distinct(repo) %>% nrow()
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index))
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index)) %>%
filter(numdays < 500) %>%
pull(repo) -> dontuse
df <- df %>%
filter(! repo %in% c(dontuse))
df %>%
distinct(repo) %>% nrow()
6 / 340
df %>%
group_by(repo) %>%
summarize(
numdays = max(event_at_index))
