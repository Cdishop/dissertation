mutate(event = "comment") %>%
select(
owner, repo, issue_id,
event_at = created_at,
event,
user_association = author_association,
user_id
)
## ---- events__contributor-association -------------------------------------
contributor_association <-
issues$contributors %>%
mutate(user_association = if_else(owner == login, "OWNER", "CONTRIBUTOR")) %>%
select(owner, repo, user_id = id, user_association)
## ---- events__author-association ------------------------------------------
author_association <-
issues[c("issue", "comment")] %>%
map_dfr(
. %>% select(owner, repo, user_id, user_association = author_association)
) %>%
distinct()
## ---- events__user-association --------------------------------------------
user_association <- dplyr::union(
contributor_association,
author_association
)
## ---- events --------------------------------------------------------------
events <-
issues$event %>%
select(
owner, repo, issue_id,
event_at = created_at,
event,
user_id = actor_id
) %>%
left_join(user_association, by = c("owner", "repo", "user_id")) %>%
replace_na(list(user_association = "NONE"))
## ---- tidy-events ---------------------------------------------------------
events_tidy <-
bind_rows(
events,
events_commented,
events_opened
) %>%
arrange(issue_id, event_at)
## ---- classify-issues -----------------------------------------------------
owner_issues <-
issues$issue %>%
filter(author_association %in% c("OWNER", "COLLABORATOR")) %>%
distinct(issue_id = id)
pull_request_issues <-
issues$issue %>%
filter(is_pull_request) %>%
distinct(issue_id = id)
has_one_owner_action <-
events_tidy %>%
filter(user_association %in% c("OWNER", "MEMBER", "COLLABORATOR"), event != "closed") %>%
distinct(issue_id)
## ---- select-issue-events -------------------------------------------------
events_tidy_selected <-
events_tidy %>%
anti_join(owner_issues, by = "issue_id") #%>%
#anti_join(pull_request_issues, by = "issue_id")# %>%
#semi_join(has_one_owner_action, by = "issue_id")
## ---- repos-today ----------------------------------------------
# Ensure that issues are opened until "today"
repos_today <-
issues$`_repos` %>%
select(owner, repo, event_at = checked_at) %>%
mutate(value = 0, event_at = ymd_hms(event_at))
## ---- issues-with-points ------------------------------------------------
# Assign +1 to opened issues -1 to closed issues
issues_with_points <-
events_tidy_selected %>%
filter(event %in% c("opened", "reopened", "closed")) %>%
distinct(owner, repo, issue_id, event, event_at) %>%
mutate(
event_at = ymd_hms(event_at),
value = case_when(
event == "closed" ~ -1,
str_detect(event, "open") ~ +1
)
) %>%
bind_rows(repos_today)
## ---- issues-open-timeline ----------------------------------------------
issues_open_timeline <-
issues_with_points %>%
arrange(event_at) %>%
group_by(owner, repo) %>%
mutate(
value = cumsum(value),
event_at_index = as.numeric(difftime(event_at, min(event_at), units = "days"))
) %>%
ungroup()
## ---- issues-open-daily -------------------------------------------------
issues_open_daily <-
issues_with_points %>%
mutate(
event_at = ymd_hms(event_at),
event_at = case_when(
event == "opened" ~ floor_date(event_at, "day"),
event == "closed" ~ ceiling_date(event_at, "day"),
TRUE ~ event_at
)
) %>%
arrange(event_at) %>%
group_by(owner, repo) %>%
complete(
event_at = seq(min(event_at), max(event_at), by = "day"),
fill = list(value = 0)
) %>%
group_by(owner, repo, event_at) %>%
summarize(value = sum(value)) %>%
mutate(
value = cumsum(value),
event_at_index = time_length(interval(min(event_at), event_at), "day"),
event_at_index = as.numeric(event_at_index),
event_since_today = -max(event_at_index) + event_at_index
) %>%
ungroup()
View(issues_open_daily)
rary ---------------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr) # 1.0.0
library(readr)
library(purrr)
library(dplyr)
library(stringr)
# additional tidyverse-adjacent packages
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## ---- import ----------------------------------------------------------
## In your code, run
issues <- readRDS("../orgs/facebook/1/issues.rds")
source("series-function.R")
f1 <- create_series(issues)
--------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr) # 1.0.0
library(readr)
library(purrr)
library(dplyr)
library(stringr)
# additional tidyverse-adjacent packages
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## ---- import ----------------------------------------------------------
## In your code, run
issues <- readRDS("../orgs/facebook/1/issues.rds")
#issues <- githubIssueCollection::example_issues
source("series-function.R")
f1 <- create_series(issues)
-library ---------------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr) # 1.0.0
library(readr)
library(purrr)
library(dplyr)
library(stringr)
# additional tidyverse-adjacent packages
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## ---- import ----------------------------------------------------------
## In your code, run
f1issues <- readRDS("../orgs/facebook/1/issues.rds")
#issues <- githubIssueCollection::example_issues
source("series-function.R")
f1 <- create_series(issues)
f1 <- create_series(f1issues)
ary ---------------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr) # 1.0.0
library(readr)
library(purrr)
library(dplyr)
library(stringr)
# additional tidyverse-adjacent packages
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## ---- import ----------------------------------------------------------
## In your code, run
f1issues <- readRDS("../orgs/facebook/1/issues.rds")
#issues <- githubIssueCollection::example_issues
source("series-function.R")
f1 <- create_series(f1issues)
View(f1)
## ----library ---------------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr) # 1.0.0
library(readr)
library(purrr)
library(dplyr)
library(stringr)
# additional tidyverse-adjacent packages
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## ---- import ----------------------------------------------------------
## In your code, run
issues <- readRDS("../orgs/facebook/1/issues.rds")
## ---- events__issue-opened ------------------------------------------------
events_opened <-
issues$issue %>%
mutate(event = "opened") %>%
select(
owner, repo,
issue_id = id,
event_at = created_at,
event,
user_association = author_association,
user_id
)
## ---- events__issue-commented ---------------------------------------------
events_commented <-
issues$comment %>%
mutate(event = "comment") %>%
select(
owner, repo, issue_id,
event_at = created_at,
event,
user_association = author_association,
user_id
)
## ---- events__contributor-association -------------------------------------
contributor_association <-
issues$contributors %>%
mutate(user_association = if_else(owner == login, "OWNER", "CONTRIBUTOR")) %>%
select(owner, repo, user_id = id, user_association)
## ---- events__author-association ------------------------------------------
author_association <-
issues[c("issue", "comment")] %>%
map_dfr(
. %>% select(owner, repo, user_id, user_association = author_association)
) %>%
distinct()
## ---- events__user-association --------------------------------------------
user_association <- dplyr::union(
contributor_association,
author_association
)
## ---- events --------------------------------------------------------------
events <-
issues$event %>%
select(
owner, repo, issue_id,
event_at = created_at,
event,
user_id = actor_id
) %>%
left_join(user_association, by = c("owner", "repo", "user_id")) %>%
replace_na(list(user_association = "NONE"))
## ---- tidy-events ---------------------------------------------------------
events_tidy <-
bind_rows(
events,
events_commented,
events_opened
) %>%
arrange(issue_id, event_at)
## ---- classify-issues -----------------------------------------------------
owner_issues <-
issues$issue %>%
filter(author_association %in% c("OWNER", "COLLABORATOR")) %>%
distinct(issue_id = id)
pull_request_issues <-
issues$issue %>%
filter(is_pull_request) %>%
distinct(issue_id = id)
has_one_owner_action <-
events_tidy %>%
filter(user_association %in% c("OWNER", "MEMBER", "COLLABORATOR"), event != "closed") %>%
distinct(issue_id)
## ---- select-issue-events -------------------------------------------------
events_tidy_selected <-
events_tidy %>%
anti_join(owner_issues, by = "issue_id") #%>%
#anti_join(pull_request_issues, by = "issue_id")# %>%
#semi_join(has_one_owner_action, by = "issue_id")
## ---- repos-today ----------------------------------------------
# Ensure that issues are opened until "today"
repos_today <-
issues$`_repos` %>%
select(owner, repo, event_at = checked_at) %>%
mutate(value = 0, event_at = ymd_hms(event_at))
## ---- issues-with-points ------------------------------------------------
# Assign +1 to opened issues -1 to closed issues
issues_with_points <-
events_tidy_selected %>%
filter(event %in% c("opened", "reopened", "closed")) %>%
distinct(owner, repo, issue_id, event, event_at) %>%
mutate(
event_at = ymd_hms(event_at),
value = case_when(
event == "closed" ~ -1,
str_detect(event, "open") ~ +1
)
) %>%
bind_rows(repos_today)
## ---- issues-open-timeline ----------------------------------------------
issues_open_timeline <-
issues_with_points %>%
arrange(event_at) %>%
group_by(owner, repo) %>%
mutate(
value = cumsum(value),
event_at_index = as.numeric(difftime(event_at, min(event_at), units = "days"))
) %>%
ungroup()
## ---- issues-open-daily -------------------------------------------------
issues_open_daily <-
issues_with_points %>%
mutate(
event_at = ymd_hms(event_at),
event_at = case_when(
event == "opened" ~ floor_date(event_at, "day"),
event == "closed" ~ ceiling_date(event_at, "day"),
TRUE ~ event_at
)
) %>%
arrange(event_at) %>%
group_by(owner, repo) %>%
complete(
event_at = seq(min(event_at), max(event_at), by = "day"),
fill = list(value = 0)
) %>%
group_by(owner, repo, event_at) %>%
summarize(value = sum(value)) %>%
mutate(
value = cumsum(value),
event_at_index = time_length(interval(min(event_at), event_at), "day"),
event_at_index = as.numeric(event_at_index),
event_since_today = -max(event_at_index) + event_at_index
) %>%
ungroup()
View(issues_open_daily)
## ----library ---------------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr) # 1.0.0
library(readr)
library(purrr)
library(dplyr)
library(stringr)
# additional tidyverse-adjacent packages
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## ---- import ----------------------------------------------------------
## In your code, run
f1issues <- readRDS("../orgs/facebook/1/issues.rds")
f2issues <- readRDS("../orgs/facebook/2/issues.rds")
f3issues <- readRDS("../orgs/facebook/3/issues.rds")
source("series-function.R")
f1 <- create_series(f1issues)
f2 <- create_series(f2issues)
f3 <- create_series(f3issues)
View(f1)
View(f2)
View(f3)
facebook <- bind_rows(f1, f2, f3)
nrow(f1) + nrow(f2) + nrow(f3) == nrow(facebook)
facebook %>%
mutate(org = "facebook") %>%
mutate(repoid = 1:nrow(repoids)) %>%
mutate(nameit = "GitHub Repo:") %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F)
facebook %>%
mutate(org = "facebook") %>%
mutate(repoid = 1:nrow(facebook)) %>%
mutate(nameit = "GitHub Repo:") %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F)
facebook <- facebook %>%
mutate(org = "facebook") %>%
mutate(repoid = 1:nrow(facebook)) %>%
mutate(nameit = "GitHub Repo:") %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F)
View(facebook)
facebook <- facebook %>%
mutate(org = "facebook") %>%
mutate(repoid = 1:nrow(facebook)) %>%
mutate(nameit = "GitHub Repo:") %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F) %>%
select(-nameit)
facebook <- facebook %>%
mutate(org = "facebook") %>%
distinct(repo) %>%
mutate(repoid = 1:nrow(facebook)) %>%
mutate(nameit = "GitHub Repo:") %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F) %>%
select(-nameit) %>%
ungroup()
## ----library ---------------------------------------------------------
# library(tidyverse)
library(ggplot2)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(stringr)
library(lubridate)
library(glue)
## ---- githubIssueCollection -------------------------------------------
library(githubIssueCollection)
## within org merging function
source("series-function.R")
f1issues <- readRDS("../orgs/facebook/1/issues.rds")
f2issues <- readRDS("../orgs/facebook/2/issues.rds")
f3issues <- readRDS("../orgs/facebook/3/issues.rds")
f1 <- create_series(f1issues)
f2 <- create_series(f2issues)
f3 <- create_series(f3issues)
facebook <- bind_rows(f1, f2, f3)
uniquefacebook <- facebook %>%
distinct(repo)
uniquefacebook <- uniquefacebook %>%
mutate(repoid = 1:nrow(uniquefacebook)) %>%
mutate(nameit = "GitHub Repo:") %>%
arrange(repoid) %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F) %>%
select(repoidname, repo, repoid)
View(uniquefacebook)
facebook <- left_join(facebook, uniquefacebook) %>%
mutate(org = "facebook")
View(facebook)
nrow(f1) + nrow(f2) + nrow(f3) == nrow(facebook)
git1issues <- readRDS("../orgs/github/1/issues.rds")
git2issues <- readRDS("../orgs/github/2/issues.rds")
git3issues <- readRDS("../orgs/github/3/issues.rds")
git4issues <- readRDS("../orgs/github/4/issues.rds")
git1 <- create_series(git1issues)
git2 <- create_series(git2issues)
git3 <- create_series(git3issues)
git4 <- create_series(git4issues)
github <- bind_rows(git1, git2, git3, git4)
uniquegithub <- github %>%
distinct(repo)
uniquegithub <- github %>%
distinct(repo)
uniquegithub <- uniquegithub %>%
mutate(repoid = 1:nrow(uniquegithub)) %>%
mutate(nameit = "GitHub Repo:") %>%
arrange(repoid) %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F) %>%
select(repoidname, repo, repoid)
github <- left_join(github, uniquegithub) %>%
mutate(org = "github")
View(github)
all_series <- function(number, organization){
final <- list()
for(i in 1:number){
iss <- readRDS(paste0("../orgs/", organization, "/", i, "/", "issues.rds"))
orgiss <- create_series(iss)
final[[i]] <- orgiss
}
}
googseries <- all_series(7, "google")
googseries[[1]]
googseries[1]
all_series <- function(number, organization){
final <- list()
for(i in 1:number){
iss <- readRDS(paste0("../orgs/", organization, "/", i, "/", "issues.rds"))
orgiss <- create_series(iss)
final[[i]] <- orgiss
}
return(final)
}
googseries <- all_series(7, "google")
googseries[1]
google <- bind_rows(googseries)
View(google)
nrow(googseries[1], googseries[2])
nrow(googseries[1]) + nrow(googseries[2])
labelit <- function(df, title){
uniq <- df %>%
distinct(repo)
uniq <- uniq %>%
mutate(repoid = 1:nrow(uniq)) %>%
mutate(nameit = "GitHub Repo:") %>%
arrange(repoid) %>%
unite("repoidname", nameit, repoid, sep = " ", remove = F) %>%
select(repoidname, repo, repoid)
out <- left_join(df, uniq) %>%
mutate(org = title)
return(out)
}
google <- labelit(google, "google")
View(google)
microseries <- all_series(9, "microsoft")
microsoft <- bind_rows(microseries)
microsoft <- labelit(microsoft, "microsoft")
finaldf <- bind_rows(facebook, github)
finaldf <- bind_rows(finaldf, google)
finaldf <- bind_rows(finaldf, microsoft)
save(finaldf, file = "../output/daily_issues.RData")
write.csv(finaldf, file = "../output/daily_issues.RData")
save(finaldf, file = "../output/daily_issues.RData")
write.csv(finaldf, file = "../output/daily_issues.csv")
